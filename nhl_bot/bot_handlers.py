from telebot import types
from database import DatabasePool
from datetime import datetime
from telebot.asyncio_handler_backends import StatesGroup, State
from urllib.parse import quote
import queries as q
from telebot import types
import cairosvg, requests
import io
import telebot

PLAYER_TYPES = {
    "–í—Ä–∞—Ç–∞—Ä—å": "goalies_agg",
    "–ü–æ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫": "skaters_agg"
}

class PlayerStates(StatesGroup):
    player = State()
    name = State()
    datalens = State()

class TeamStates(StatesGroup):
    team_name = State()

class UserStates(StatesGroup):
    favorite_team = State()

class BetStates(StatesGroup):
    select_game = State()
    select_winner = State()
    enter_score = State()

async def send_svg_as_png(bot, chat_id, svg_url):
    try:
        response = requests.get(svg_url)
        response.raise_for_status()
        svg_data = response.content

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG
        png_data = cairosvg.svg2png(bytestring=svg_data)

        png_image = io.BytesIO(png_data)
        png_image.seek(0)

        await bot.send_photo(chat_id, png_image)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SVG: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

def register_bot_commands(bot):
    db_pool = DatabasePool()

    @bot.message_handler(commands=["start"])
    async def start_message(message):
        start_text = (
            "–ü—Ä–∏–≤–µ—Ç!\n"
            "–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n"
            "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: /results\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: /player_stats\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥: /team_stats\n"
            # "–í—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É: /set_favorite_team\n"
            "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ö–æ–¥ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π: /make_bet\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ ML –º–æ–¥–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏: /show_preds\n"
            "–î–∞—à–±–æ—Ä–¥—ã –≤ DataLens: /datalens"
        )
        await bot.send_message(message.chat.id, start_text)

    @bot.message_handler(commands=["results"])
    async def get_results(message):
        try:
            db_pool = DatabasePool()
            results = db_pool.query_to_dataframe("""
                SELECT * 
                FROM public.games_wide_datamart 
                WHERE game_date between current_date - interval '1 week' and current_date
                    AND (home_score != 0 AND visiting_score != 0)
                ORDER BY eastern_start_time DESC, game_date
            """)
            db_pool.close_all_connections()

            response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
            last_date = None

            for index, row in results.iterrows():
                if last_date is not None and last_date != row['game_date']:
                    response += "\n\n"

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫—É–±–∫–∞
                if row['home_score'] > row['visiting_score']:
                    home_team = f"üèÜ <b>{row['home_team_name']}</b>"
                    visiting_team = row['visiting_team_name']
                elif row['home_score'] < row['visiting_score']:
                    home_team = row['home_team_name']
                    visiting_team = f"<b>{row['visiting_team_name']}</b> üèÜ"
                else:
                    home_team = row['home_team_name']
                    visiting_team = row['visiting_team_name']

                game_info = f"{row['game_date']}   {home_team} {row['home_score']} : {row['visiting_score']} {visiting_team}"
                response += game_info + "\n\n"
                last_date = row['game_date']  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É

            if response.endswith("\n"):
                response = response[:-1]
            await bot.send_message(message.chat.id, response, parse_mode='HTML')
        except Exception as e:
            await bot.send_message(message.chat.id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")


    @bot.message_handler(commands=["player_stats"])
    async def get_players(message):
        keys = ["–í—Ä–∞—Ç–∞—Ä—å", "–ü–æ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫"]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        row = [types.KeyboardButton(x) for x in keys]
        markup.add(*row)
        await bot.set_state(message.from_user.id, PlayerStates.player, message.chat.id)
        await bot.send_message(message.chat.id, "–í—Ä–∞—Ç–∞—Ä—å –∏–ª–∏ –ø–æ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫?", reply_markup=markup)

    @bot.message_handler(state=PlayerStates.player)
    async def get_name(message):
        markup = telebot.types.ReplyKeyboardRemove()

        await bot.set_state(message.from_user.id, PlayerStates.name, message.chat.id)
        await bot.send_message(message.chat.id,
                            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, Alex Ovechkin" if message.text == '–ü–æ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫' else "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, Sergei Bobrovsky",
                                reply_markup=markup)

        try:
            player_type = PLAYER_TYPES[message.text]
            async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data["player"] = player_type
        except KeyError:
            await bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @bot.message_handler(state=PlayerStates.name)
    async def get_stats(message):
        player_name = message.text
        markup = telebot.types.ReplyKeyboardRemove()

        try:
            async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                player_type = data["player"]

                if player_type == 'skaters_agg':
                    query = q.get_skaters_stats_query(player_name)
                else:
                    query = q.get_goalies_stats_query(player_name)

                db_pool = DatabasePool()
                df = db_pool.query_to_dataframe(query)

                if df.empty:
                    raise ValueError("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
            player_info = df.iloc[0]

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏–≥—Ä–æ–∫–∞
            await bot.send_photo(message.chat.id, player_info['headshot'], reply_markup=markup)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–æ–∫–µ
            response = (
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {player_info['birth_date']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {int(player_info['years_old'])}\n"
                f"–°—Ç—Ä–∞–Ω–∞: {player_info['birth_country']}\n"
                f"–ì–æ—Ä–æ–¥: {player_info['birth_city']}\n"
                f"–ö–æ–º–∞–Ω–¥–∞: {player_info['team_full_name']} ({player_info['team_business_id']})\n"
                f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {int(player_info['game_cnt'])}\n"
            )

            if player_type == 'skaters_agg':
                response += (
                    f"–û—á–∫–æ–≤: {int(player_info['points'])}\n"
                    f"–ì–æ–ª–æ–≤: {int(player_info['goals'])}\n"
                    f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏: {int(player_info['plus_minus'])}\n"
                )
            else:
                response += f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ä–∞–∂–µ–Ω–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤: {round(player_info['shots_against_pctg'], 2)}\n"

            await bot.send_message(message.chat.id, response, reply_markup=markup)

            player_name_encoded = quote(player_name)

            if player_type == 'skaters_agg':
                dashboard_url = f"https://datalens.yandex/xqnhz02g6x6ml?tab=lD&player_full_name_s={player_name_encoded}"
            else:
                dashboard_url = f"https://datalens.yandex/xqnhz02g6x6ml?tab=24G&player_full_name_g={player_name_encoded}"

            await bot.send_message(
                message.chat.id,
                f"–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –Ω–∞—à–µ–º [–¥–∞—à–±–æ—Ä–¥–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º]({dashboard_url})",
                parse_mode="MarkdownV2",
            )

            await bot.delete_state(message.from_user.id, message.chat.id)

        except Exception as e:
            await bot.send_message(message.chat.id, str(e), reply_markup=markup)


    @bot.message_handler(commands=["team_stats"])
    async def get_team_stats(message):
        markup = types.ReplyKeyboardRemove()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç—Ä–∏–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 'Washington Capitals' –∏–ª–∏ 'WSH'", reply_markup=markup)
        await bot.set_state(message.from_user.id, TeamStates.team_name, message.chat.id)


    @bot.message_handler(state=TeamStates.team_name)
    async def display_team_stats(message):
        team_name = message.text
        stats_query = q.get_team_stats_query(team_name)

        try:
            db_pool = DatabasePool()
            stats_df = db_pool.query_to_dataframe(stats_query)

            if stats_df.empty:
                raise ValueError("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            team_info = stats_df.iloc[0]

            logo_query = q.get_team_logo_query(team_info['team_name'])
            logo_df = db_pool.query_to_dataframe(logo_query)

            db_pool.close_all_connections()
            
            logo_url = logo_df['team_logo'].iloc[0]

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
            await send_svg_as_png(bot, message.chat.id, logo_url)
            
            response = f"{team_info['team_name']}\n"
            response += f"–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è: {team_info['conference_name']}\n"
            response += f"–î–∏–≤–∏–∑–∏–æ–Ω: {team_info['division_name']}\n"
            response += f"–°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {team_info['games_played']}\n–ú–µ—Å—Ç–æ –≤ –ª–∏–≥–µ: {team_info['league_sequence']}\n–û—á–∫–∏: {team_info['points']}\n"
            response += f"–ü–æ–±–µ–¥: {team_info['wins']} ({100 * team_info['win_pctg']:.2f}%)\n–ó–∞–±–∏—Ç–æ –≥–æ–ª–æ–≤: {team_info['goal_for']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ –≥–æ–ª–æ–≤: {team_info['goal_against']}"

            await bot.send_message(message.chat.id, response, reply_markup=types.ReplyKeyboardRemove())

            team_name_encoded = quote(team_info['team_name'])

            dashboard_url = f"https://datalens.yandex/xqnhz02g6x6ml?tab=jAE&team_name_field_id={team_name_encoded}"

            await bot.send_message(
                message.chat.id,
                f"–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –Ω–∞—à–µ–º [–¥–∞—à–±–æ—Ä–¥–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º]({dashboard_url})",
                parse_mode="MarkdownV2",
            )

            await bot.delete_state(message.from_user.id, message.chat.id)

        except Exception as e:
            await bot.send_message(message.chat.id, str(e), reply_markup=types.ReplyKeyboardRemove())


    @bot.message_handler(state="*", commands=["cancel"])
    async def cancel(message):
        await bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞")
        await bot.delete_state(message.from_user.id, message.chat.id)

    @bot.message_handler(commands=["datalens"])
    async def get_datalens(message):
        keys = ["–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞", "–õ–∏–¥–µ—Ä–±–æ—Ä–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã", 
                "–ò–≥—Ä–æ–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ", "–§–æ—Ä–≤–∞—Ä–¥—ã –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏", "–í—Ä–∞—Ç–∞—Ä–∏", 
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–∞—Ç–∞—Ä—è"]
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        row = [telebot.types.KeyboardButton(option) for option in keys]
        markup.add(*row)

        await bot.set_state(message.from_user.id, PlayerStates.datalens, message.chat.id)
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –¥–∞—à–±–æ—Ä–¥–∞", reply_markup=markup)

    @bot.message_handler(state=PlayerStates.datalens)
    async def get_datalens(message):
        datalens_type = {
            "–ò–≥—Ä–æ–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ": "7pV",
            "–§–æ—Ä–≤–∞—Ä–¥—ã –∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∏": "LD",
            "–í—Ä–∞—Ç–∞—Ä–∏": "Re",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞": "lD",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–∞—Ç–∞—Ä—è": "24G",
            "–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞": "LMJ",
            "–õ–∏–¥–µ—Ä–±–æ—Ä–¥": "AGK",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã": "jAE",
        }

        try:
            dashboard_code = datalens_type[message.text]
            dashboard_url = f"https://datalens.yandex/xqnhz02g6x6ml?tab={dashboard_code}"
            markup = telebot.types.ReplyKeyboardRemove()

            await bot.send_message(
                message.chat.id,
                f'[–î–∞—à–±–æ—Ä–¥ –≤ DataLens "{message.text}"]({dashboard_url})',
                parse_mode="MarkdownV2",
                reply_markup=markup
            )
            await bot.delete_state(message.from_user.id, message.chat.id)
        except KeyError:
            await bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @bot.message_handler(commands=["set_favorite_team"])
    async def set_favorite_team(message):
        db_pool = DatabasePool()
        teams_df = db_pool.query_to_dataframe(q.get_teams_query())
        teams_list = list(teams_df['team_name'])

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

        for i in range(0, len(teams_list), 4):
            row = teams_list[i:i+4]
            markup.row(*(types.KeyboardButton(name) for name in row))
        markup.add(types.KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"))
        
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É:", reply_markup=markup)
        await bot.set_state(message.from_user.id, UserStates.favorite_team, message.chat.id)


    @bot.message_handler(state=UserStates.favorite_team)
    async def save_favorite_team(message):
        team_name = message.text
        user_id = message.from_user.id
        
        if team_name == "–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
            db_pool = DatabasePool()
            db_pool.execute_query(f"DELETE FROM public.favorite_teams WHERE user_id = {user_id}")
            await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        else:
            db_pool = DatabasePool()
            try:
                db_pool.execute_query(f"""
                    INSERT INTO public.favorite_teams (user_id, team_id, selected_at) VALUES ({user_id}, '{team_name}', NOW())
                    ON CONFLICT (user_id) DO UPDATE SET team_id = EXCLUDED.team_id, selected_at = NOW();
                """)
                await bot.send_message(message.chat.id, f"–í–∞—à–∞ –ª—é–±–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–ø–µ—Ä—å {team_name}.", reply_markup=types.ReplyKeyboardRemove())
            except Exception as e:
                await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}.", reply_markup=types.ReplyKeyboardRemove())

        await bot.delete_state(message.from_user.id, message.chat.id)


    ######################################################
    ##################### Users Bets #####################
    ######################################################

    @bot.message_handler(commands=["make_bet"])
    async def make_bet(message):
        user_id = message.from_user.id
        games_df = db_pool.query_to_dataframe(q.get_upcoming_games_query(user_id))

        if games_df.empty:
            await bot.send_message(message.chat.id, "–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.")
            return

        markup = types.InlineKeyboardMarkup()
        for index, row in games_df.iterrows():
            moscow_time = datetime.strptime(str(row['moscow_time']), '%Y-%m-%d %H:%M:%S%z').strftime('%m-%d %H:%M')
            bet_indicator = "‚úÖ" if row['bet_placed'] else ""
            button_text = f"{moscow_time} {row['home_team_name']} vs {row['visiting_team_name']} {bet_indicator}"
            markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"game_{row['game_source_id']}"))

        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=markup)
        await bot.set_state(message.from_user.id, BetStates.select_game, message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
    async def select_winner(call):
        game_id = int(call.data.split("_")[1])
        game_details = db_pool.query_to_dataframe(q.get_game_details_query(game_id))

        if game_details.empty:
            await bot.send_message(call.message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        game = game_details.iloc[0]
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(game['home_team_name'], callback_data=f"winner_{game_id}_home"),
            types.InlineKeyboardButton(game['visiting_team_name'], callback_data=f"winner_{game_id}_visiting")
        )

        await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:", reply_markup=markup)
        await bot.set_state(call.from_user.id, BetStates.select_winner, call.message.chat.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("winner_"))
    async def enter_score(call):
        game_id, winner_team = call.data.split("_")[1], call.data.split("_")[2]
        winner = True if winner_team == 'home' else False

        async with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['game_id'] = game_id
            data['home_team_winner'] = winner

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–î–∞", callback_data=f"score_{game_id}"),
            types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"noscore_{game_id}")
        )

        await bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç?", reply_markup=markup)


    @bot.callback_query_handler(func=lambda call: call.data.startswith("score_") or call.data.startswith("noscore_"))
    async def save_bet(call):
        game_id = int(call.data.split("_")[1])
        if call.data.startswith("noscore_"):
            async with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
                db_pool.execute_query(q.save_user_bet(call.from_user.id, data['game_id'], data['home_team_winner']))
            await bot.send_message(call.message.chat.id, "–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            await bot.delete_state(call.from_user.id, call.message.chat.id)
        elif call.data.startswith("score_"):
            await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'home:away'")
            await bot.set_state(call.from_user.id, BetStates.enter_score, call.message.chat.id)


    @bot.message_handler(state=BetStates.enter_score)
    async def process_score(message):
        try:
            home_score, visiting_score = map(int, message.text.split(":"))
        except ValueError:
            await bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            home_team_winner = data['home_team_winner']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
            if home_team_winner and home_score <= visiting_score:
                await bot.send_message(message.chat.id, "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∞ –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            elif not home_team_winner and home_score >= visiting_score:
                await bot.send_message(message.chat.id, "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Å—á–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –≤ –ë–î
            db_pool.execute_query(q.save_user_bet(message.from_user.id, 
                                                data['game_id'], 
                                                home_team_winner, 
                                                home_score, 
                                                visiting_score))

        await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ —Å—á–µ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await bot.delete_state(message.from_user.id, message.chat.id)


    ######################################################
    ################### ML predictions ###################
    ######################################################

    @bot.message_handler(commands=["show_preds"])
    async def show_preds(message):
        games_df = db_pool.query_to_dataframe(q.get_upcoming_preds_query())

        if games_df.empty:
            await bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.")
            return

        response = "–í–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω—è:\n\n"

        for index, row in games_df.iterrows():
            moscow_time = datetime.strptime(str(row['moscow_time']), '%Y-%m-%d %H:%M:%S%z').strftime('%m-%d %H:%M')

            winner = row['home_team_name'] if row['home_team_win'] else row['visiting_team_name']
            if row['home_team_win']:
                response += f"{moscow_time} üèÜ <b>{row['home_team_name']}</b> vs {row['visiting_team_name']}\n\n"
            else:
                response += f"{moscow_time} {row['home_team_name']} vs <b>{row['visiting_team_name']}</b> üèÜ\n\n"
        response += "* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏."
        await bot.send_message(message.chat.id, response, parse_mode='HTML')
